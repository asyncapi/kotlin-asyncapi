{
  "version": "3",
  "listProblem": [
    {
      "tool": "Code Inspection",
      "category": "Style issues",
      "categoryPath": [
        {
          "id": "Kotlin",
          "name": "Kotlin"
        },
        {
          "id": "Kotlin/Style issues",
          "name": "Style issues"
        }
      ],
      "type": "Local 'var' is never modified and can be declared as 'val'",
      "tags": [
        "kotlin"
      ],
      "severity": "High",
      "comment": "Variable is never modified, so it can be declared using 'val'",
      "detailsInfo": "Reports local variables declared with the `var` keyword that are never modified.\n\nKotlin encourages to declare practically immutable variables using the `val` keyword, ensuring that their value will never change.\n\n**Example:**\n\n\n      fun example() {\n          var primeNumbers = listOf(1, 2, 3, 5, 7, 11, 13)\n          var fibonacciNumbers = listOf(1, 1, 2, 3, 5, 8, 13)\n          print(\"Same numbers: \" + primeNumbers.intersect(fibonacciNumbers))\n      }\n\nThe quick-fix replaces the `var` keyword with `val`:\n\n\n      fun example() {\n          val primeNumbers = listOf(1, 2, 3, 5, 7, 11, 13)\n          val fibonacciNumbers = listOf(1, 1, 2, 3, 5, 8, 13)\n          print(\"Same numbers: \" + primeNumbers.intersect(fibonacciNumbers))\n      }\n",
      "sources": [
        {
          "type": "file",
          "path": "kotlin-asyncapi-context/src/main/kotlin/com/asyncapi/kotlinasyncapi/context/annotation/processor/AsyncApiComponentProcessor.kt",
          "language": "kotlin",
          "line": 18,
          "offset": 21,
          "length": 3,
          "code": {
            "startLine": 16,
            "length": 3,
            "offset": 145,
            "surroundingCode": "            channels {\n                context.functions.filter { it.hasAnnotation<Channel>() }.forEach { currentFunction ->\n                    var currentAnnotation = currentFunction.findAnnotation<Channel>()!!\n                    currentAnnotation.toChannel()\n                        .apply {"
          }
        }
      ],
      "attributes": {
        "module": "kotlin-asyncapi-context",
        "inspectionName": "CanBeVal"
      },
      "hash": "499fbd606c582a5bcc082630315ad29a32e708cd21dcdab88cc3b28ae2902763"
    },
    {
      "tool": "Code Inspection",
      "category": "Redundant constructs",
      "categoryPath": [
        {
          "id": "Kotlin",
          "name": "Kotlin"
        },
        {
          "id": "Kotlin/Redundant constructs",
          "name": "Redundant constructs"
        }
      ],
      "type": "Unused symbol",
      "tags": [
        "kotlin"
      ],
      "severity": "High",
      "comment": "Property \"scanAnnotations\" is never used",
      "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
      "sources": [
        {
          "type": "file",
          "path": "kotlin-asyncapi-ktor/src/main/kotlin/com/asyncapi/kotlinasyncapi/ktor/AsyncApiConfiguration.kt",
          "language": "kotlin",
          "line": 9,
          "offset": 9,
          "length": 15,
          "code": {
            "startLine": 7,
            "length": 15,
            "offset": 85,
            "surroundingCode": "    var path: String = \"/docs/asyncapi\"\n    var baseClass: KClass<*>? = null\n    var scanAnnotations: Boolean = true\n    var extension: AsyncApiExtension = AsyncApiExtension.empty()\n    var extensions: List<AsyncApiExtension> = emptyList()"
          }
        }
      ],
      "attributes": {
        "module": "kotlin-asyncapi-ktor",
        "inspectionName": "UnusedSymbol"
      },
      "hash": "45a91826e472a30f397f30a3c793ae9530943b27d0b5c3d00ebd81dc5962ce7b"
    }
  ]
}